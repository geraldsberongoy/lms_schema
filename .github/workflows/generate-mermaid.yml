name: 📊 Generate Database Schema Documentation
permissions:
  contents: write
  pull-requests: write
on:
  push:
    paths:
      - "diagram/*.mmd"
      - ".github/workflows/generate-mermaid.yml"
  pull_request:
    paths:
      - "diagram/*.mmd"

env:
  NODE_VERSION: "20"

jobs:
  validate:
    name: 🔍 Validate Mermaid Syntax
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install mermaid CLI
        run: npm install -g @mermaid-js/mermaid-cli@latest

      - name: Validate Mermaid files
        run: |
          echo "🔍 Validating Mermaid syntax..."
          find . -type f -name '*.mmd' | while read file; do
            echo "Validating: $file"
            mmdc -i "$file" -o "/tmp/$(basename "$file" .mmd).svg" --quiet
            if [ $? -eq 0 ]; then
              echo "✅ $file is valid"
            else
              echo "❌ $file has syntax errors"
              exit 1
            fi
          done

  render:
    name: 🎨 Generate Documentation
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libnss3-dev \
            libatk-bridge2.0-dev \
            libdrm-dev \
            libxkbcommon-dev \
            libgtk-3-dev \
            libgbm-dev \
            libasound2-dev

      - name: Install mermaid CLI
        run: npm install -g @mermaid-js/mermaid-cli@latest

      - name: Create Puppeteer config
        run: |
          cat > puppeteer.config.json << 'EOF'
          {
            "args": [
              "--no-sandbox",
              "--disable-setuid-sandbox",
              "--disable-dev-shm-usage",
              "--disable-accelerated-2d-canvas",
              "--no-first-run",
              "--no-zygote",
              "--single-process",
              "--disable-gpu"
            ]
          }
          EOF

      - name: Generate SVG diagrams
        run: |
          set -e
          echo "🎨 Generating diagrams..."

          # Create output directory if it doesn't exist
          mkdir -p docs/diagrams

          # Generate SVG files
          find . -type f -name '*.mmd' -print0 | while IFS= read -r -d '' file; do
            out="${file%.mmd}.svg"
            echo "📊 Rendering $file -> $out"
            mmdc -i "$file" -o "$out" --puppeteerConfigFile puppeteer.config.json --theme default --backgroundColor white
            
            # Also generate PNG for better compatibility
            png_out="${file%.mmd}.png"
            echo "🖼️  Rendering $file -> $png_out"
            mmdc -i "$file" -o "$png_out" --puppeteerConfigFile puppeteer.config.json --theme default --backgroundColor white
            
            # Generate high-res version for documentation
            docs_svg="docs/diagrams/$(basename "${file%.mmd}").svg"
            mmdc -i "$file" -o "$docs_svg" --puppeteerConfigFile puppeteer.config.json --theme default --backgroundColor white --width 1200 --height 800
          done

      - name: Generate statistics
        run: |
          echo "📈 Generating schema statistics..."

          # Count tables and relationships
          tables=$(grep -c "^\s*\w\+\s*{" diagram/schema.mmd || echo "0")
          relationships=$(grep -c "||--" diagram/schema.mmd || echo "0")

          echo "📊 Schema Statistics:" > schema-stats.md
          echo "- **Tables**: $tables" >> schema-stats.md
          echo "- **Relationships**: $relationships" >> schema-stats.md
          echo "- **Last Updated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> schema-stats.md

          cat schema-stats.md

      - name: Update README with timestamp
        run: |
          echo "📝 Updating README with current timestamp..."
          sed -i "s/\*Last updated:.*/\*Last updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC') - Automatically generated by GitHub Actions\*/" README.md

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Add all generated files
          git add '**/*.svg' '**/*.png' docs/ README.md schema-stats.md || true

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "📝 No changes to commit"
          else
            echo "📝 Committing generated documentation..."
            git commit -m "📊 Auto-generate schema documentation

            - Updated diagram files
            - Generated SVG and PNG outputs  
            - Updated README timestamp
            - Added schema statistics
            
            Generated by: ${{ github.workflow }} #${{ github.run_number }}"
            git push
            echo "✅ Changes pushed successfully"
          fi
